<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://luminqiang.github.io/</id>
    <title>卢敏强的博客</title>
    <updated>2020-02-21T00:53:58.026Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://luminqiang.github.io/"/>
    <link rel="self" href="https://luminqiang.github.io/atom.xml"/>
    <subtitle>Start With Why</subtitle>
    <logo>https://luminqiang.github.io/images/avatar.png</logo>
    <icon>https://luminqiang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 卢敏强的博客</rights>
    <entry>
        <title type="html"><![CDATA[计算机组成原理学习笔记（程序的编译、链接、装载）]]></title>
        <id>https://luminqiang.github.io/post/ji-suan-ji-zu-cheng-yuan-li-xue-xi-bi-ji-cheng-xu-de-bian-yi-lian-jie-zhuang-zai/</id>
        <link href="https://luminqiang.github.io/post/ji-suan-ji-zu-cheng-yuan-li-xue-xi-bi-ji-cheng-xu-de-bian-yi-lian-jie-zhuang-zai/">
        </link>
        <updated>2020-02-20T13:51:03.000Z</updated>
        <content type="html"><![CDATA[<p>首先我们都明白写好的程序通过编译之后变成了机器码由CPU执行，但是为什么相同的代码无法在同一台计算机的Linux和Windows系统下同时运行？</p>
<ul>
<li>
<h2 id="拆解程序执行">拆解程序执行</h2>
</li>
</ul>
<p>写好的 C 语言代码，可以通过编译器编译成汇编代码，然后汇编代码再通过汇编器变成 CPU 可以理解的机器码，于是 CPU 就可以执行这些机器码。这个过程是最简练的三个步骤，但具体是怎么变成一个可执行程序的呢？</p>
<p><strong>“C 语言代码 - 汇编代码 - 机器码”</strong> 这个过程，在我们的计算机上进行的时候是由两部分组成的。</p>
<p>第一部分:由编译（Compile）、汇编（Assemble）以及链接（Link）三个阶段组成。在这三个阶段完成之后，我们就生成了一个可执行文件。</p>
<p>第二部分:通过装载器（Loader）把可执行文件装载（Load）到内存中。CPU 从内存中读取指令和数据，来开始真正执行程序。</p>
<figure data-type="image" tabindex="1"><img src="https://static001.geekbang.org/resource/image/99/a7/997341ed0fa9018561c7120c19cfa2a7.jpg" alt="iamge" loading="lazy"></figure>
<ul>
<li>
<h2 id="elf-格式和链接理解链接过程">ELF 格式和链接：理解链接过程</h2>
</li>
</ul>
<p>程序最终是通过装载器变成指令和数据的，所以其实我们生成的可执行代码也并不仅仅是一条条的指令。</p>
<p>Linux 下，可执行文件和目标文件所使用的都是一种叫ELF（Execuatable and Linkable File Format）的文件格式，中文名字叫可执行与可链接文件格式，这里面不仅存放了编译成的汇编指令，还保留了很多别的数据。</p>
<figure data-type="image" tabindex="2"><img src="https://static001.geekbang.org/resource/image/27/b3/276a740d0eabf5f4be905fe7326d9fb3.jpg" alt="image" loading="lazy"></figure>
<p>ELF 文件格式把各种信息，分成一个一个的 Section 保存起来。ELF 有一个基本的文件头（File Header），用来表示这个文件的基本属性，比如是否是可执行文件，对应的 CPU、操作系统等等。除了这些基本属性之外，大部分程序还有这么一些 Section：</p>
<ol>
<li>
<p>首先是.text Section，也叫作代码段或者指令段（Code Section），用来保存程序的代码和指令；</p>
</li>
<li>
<p>接着是.data Section，也叫作数据段（Data Section），用来保存程序里面设置好的初始化数据信息；</p>
</li>
<li>
<p>然后就是.rel.text Secion，叫作重定位表（Relocation Table）。重定位表里，保留的是当前的文件里面，哪些跳转地址其实是我们不知道的。比如上面的 link_example.o 里面，我们在 main 函数里面调用了 add 和 printf 这两个函数，但是在链接发生之前，我们并不知道该跳转到哪里，这些信息就会存储在重定位表里；</p>
</li>
<li>
<p>最后是.symtab Section，叫作符号表（Symbol Table）。符号表保留了我们所说的当前文件里面定义的函数名称和对应地址的地址簿。</p>
</li>
</ol>
<p>链接器会扫描所有输入的目标文件，然后把所有符号表里的信息收集起来，构成一个全局的符号表。然后再根据重定位表，把所有不确定要跳转地址的代码，根据符号表里面存储的地址，进行一次修正。最后，把所有的目标文件的对应段进行一次合并，变成了最终的可执行代码。这也是为什么，可执行文件里面的函数调用的地址都是正确的。</p>
<figure data-type="image" tabindex="3"><img src="https://static001.geekbang.org/resource/image/f6/12/f62da9b29aa53218f8907851df27f912.jpeg" alt="image" loading="lazy"></figure>
<p>在链接器把程序变成可执行文件之后，要装载器去执行程序就容易多了。装载器不再需要考虑地址跳转的问题，只需要解析 ELF 文件，把对应的指令和数据，加载到内存里面供 CPU 执行就可以了。</p>
<p>为什么同样一个程序，在 Linux 下可以执行而在 Windows 下不能执行了。其中一个非常重要的原因就是，两个操作系统下可执行文件的格式不一样。</p>
<p>Linux 下是 ELF 文件格式，而 Windows 的可执行文件格式是一种叫作PE（Portable Executable Format）的文件格式。Linux 下的装载器只能解析 ELF 格式而不能解析 PE 格式。</p>
<p>如果我们有一个可以能够解析 PE 格式的装载器，我们就有可能在 Linux 下运行 Windows 程序了。这样的程序真的存在吗？没错，Linux 下著名的开源项目 Wine，就是通过兼容 PE 格式的装载器，使得我们能直接在 Linux 下运行 Windows 程序的。而现在微软的 Windows 里面也提供了 WSL，也就是 Windows Subsystem for Linux，可以解析和加载 ELF 格式的文件。</p>
<p>我们去写可以用的程序，也不仅仅是把所有代码放在一个文件里来编译执行，而是可以拆分成不同的函数库，最后通过一个静态链接的机制，使得不同的文件之间既有分工，又能通过静态链接来“合作”，变成一个可执行的程序。</p>
<p>对于 ELF 格式的文件，为了能够实现这样一个静态链接的机制，里面不只是简单罗列了程序所需要执行的指令，还会包括链接所需要的重定位表和符号表。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机组成原理学习笔记（一）]]></title>
        <id>https://luminqiang.github.io/post/ji-suan-ji-zu-cheng-yuan-li-xue-xi-bi-ji-yi/</id>
        <link href="https://luminqiang.github.io/post/ji-suan-ji-zu-cheng-yuan-li-xue-xi-bi-ji-yi/">
        </link>
        <updated>2020-02-12T00:59:29.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://luminqiang.github.io//post-images/1581469229146.jfif" alt="" loading="lazy"></figure>
<p>计算机组成原理（Computer Organization），Organization为“组织结构”的意思，计算机的组成便是很多不同的部件构成的一个组织结构，这个组织结构可以进行计算、存储、输入、输出，组合在一起可以实现各种功能。</p>
<p>冯.诺依曼体系结构中的五大基本组件：<br>
运算器、寄存器、输入、输出设备、存储器</p>
<p>计算机的两个核心指标：<br>
性能和功耗</p>
<p>CPU:Central Processing Unit(中央处理器)，由寄存器、控制器、运算器、时钟四个部分组成，每个部分由电流信号相互连通。</p>
<p>寄存器：<br>
用来暂存指令、数据等处理对象，是提供给CPU使用的“内存”，一个CPU内部会有20-100个寄存器。zhixing</p>
<p>寄存器的种类：<br>
累加寄存器：存储zhi'xing</p>
<p>控制器：<br>
负责把内存上的数据、指令等信息读入寄存器，并根据指令的执行结果来控制计算机。</p>
<p>运算器：<br>
负责运算寄存器中的数据。</p>
<p>时钟：<br>
发出CPU开始计时的时钟信号。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP学习之缓存机制]]></title>
        <id>https://luminqiang.github.io/post/http-xue-xi-zhi-huan-cun-ji-zhi/</id>
        <link href="https://luminqiang.github.io/post/http-xue-xi-zhi-huan-cun-ji-zhi/">
        </link>
        <updated>2019-12-28T02:20:57.000Z</updated>
        <content type="html"><![CDATA[<p><strong>什么是缓存？</strong><br>
缓存(Cache)是计算机领域里的重要概念，是优化系统性能的重要手段。</p>
<p><strong>为什么需要缓存？</strong><br>
链路漫长，网络时延不可控，浏览器使用http获取资源的成本比较高，把上次请求的数据进行缓存，下次请求时可直接使用缓存中的数据，避免再进行多次请求 - 应答，节约网络带宽，提高响应速度。</p>
<p><strong>缓存的基本流程？</strong><br>
1.浏览器发现缓存无数据，则从浏览器获取相应的资源<br>
2.服务器响应请求，返回资源，标记资源有效期<br>
3.浏览器对资源进行缓存，再次请求在有效期内则使用缓存</p>
<figure data-type="image" tabindex="1"><img src="https://static001.geekbang.org/resource/image/a1/5b/a1968821f214df4a3ae16c9b30f99a5b.png" alt="" loading="lazy"></figure>
<p><strong>服务端控制缓存？</strong></p>
<p>控制缓存通过请求/响应头中添加对应的缓存控制字段</p>
<p>响应头中添加 Cache-Control:max-age=30，意思为该资源的有效时间为30秒，max-age代表资源的生存期，时间是从浏览器响应时间开始计算，并不是指浏览器拿到响应数据的时间，因为这是服务端进行设置的，自然是站在服务端的角度。</p>
<p>max-age是缓存控制的基本属性，还有其他属性用来更精确的控制</p>
<p>1.no_store 不允许浏览器缓存，资源变化比较频繁的数据一般使用这个选项<br>
2.no_cache 并不是是指不使用缓存，而是可以使用缓存，但每次使用都必须去服务端验证缓存是否失效<br>
3.must_revaldate 缓存不过期则可以继续使用，过期后再去服务端验证，不需要每次进行验证</p>
<figure data-type="image" tabindex="2"><img src="https://static001.geekbang.org/resource/image/8a/b2/8a67535620ab9c7764560363f83982b2.png" alt="" loading="lazy"></figure>
<p><strong>客户端控制缓存？</strong></p>
<p>客户端控制缓存也是使用Cache-Control请求头字段，请求方和响应方都可以使用这个字段进行缓存控制，互相协商。</p>
<p>常见场景：<br>
1.F5刷新页面</p>
<p>浏览器在请求头中添加Cache-Control:max=age=0 ，希望服务端返回最新的数据</p>
<figure data-type="image" tabindex="3"><img src="https://luminqiang.github.io//post-images/1577501221957.png" alt="" loading="lazy"></figure>
<p>2.Ctrl + F5 强制刷新页面</p>
<p>浏览器在请求头中添加Cache-Control:no_cache，检查是否有最新的数据，有则返回</p>
<figure data-type="image" tabindex="4"><img src="https://luminqiang.github.io//post-images/1577501283189.png" alt="" loading="lazy"></figure>
<p>二者的效果通常是一致的</p>
<p><strong>条件请求</strong></p>
<p>浏览器用“Cache-Control”做缓存控制只能是刷新数据，但是如何去验证数据是否过期是否有效却做不到，需要通过其他方式实现。</p>
<p>1.浏览器使用两个请求<br>
第一步 先发送一个最简单的Head请求，获取资源的元信息，判断缓存的资源是否过期<br>
第二步 如果对比后资源过期，则使用Get请求获取新数据</p>
<p>但是因为需要使用两个请求才能完成验证，所以HTTP协议定义了一系列If开头的条件请求字段，专门用于检测资源是否过期，将验证工作整合在一次请求中，由服务端进行验证工作。</p>
<p>条件请求一共有 5 个头字段，我们最常用的是“if-Modified-Since”和“If-None-Match”这两个。需要第一次的响应报文预先提供“Last-modified”和“ETag”，然后第二次请求时就可以带上缓存里的原值，验证资源是否是最新的。</p>
<p>如果资源没有变，服务器就回应一个“304 Not Modified”，表示缓存依然有效，浏览器就可以更新一下有效期，然后放心大胆地使用缓存了。</p>
<figure data-type="image" tabindex="5"><img src="https://static001.geekbang.org/resource/image/b2/37/b239d0804be630ce182e24ea9e4ab237.png" alt="" loading="lazy"></figure>
<p>Last-modified : 文件的最后修改时间</p>
<p>ETag : “实体标签”（Entity Tag）的缩写，是资源的一个唯一标识，主要是用来解决修改时间无法准确区分文件变化的问题。</p>
<p>ETag 还有“强”“弱”之分。强 ETag 要求资源在字节级别必须完全相符，弱 ETag 在值前有个“W/”标记，只要求资源在语义上没有变化，但内部可能会有部分发生了改变（例如 HTML 里的标签顺序调整，或者多了几个空格）。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP学习笔记之连接管理]]></title>
        <id>https://luminqiang.github.io/post/http-xue-xi-bi-ji-zhi-lian-jie-guan-li/</id>
        <link href="https://luminqiang.github.io/post/http-xue-xi-bi-ji-zhi-lian-jie-guan-li/">
        </link>
        <updated>2019-12-26T13:41:58.000Z</updated>
        <content type="html"><![CDATA[<p>HTTP的性能中规中矩，不算差，并不够好，比不上RPC这种协议，但是胜在简单方便，关于http的连接，则分为短连接与长连接。</p>
<p>短连接<br>
HTTP 协议的最初版本0.9/1.0，是个非常简单的协议，通信过程也采用了简单的“请求 - 应答”方式。</p>
<p>它底层的数据传输基于 TCP/IP，每次发送请求前需要先与服务器建立连接，收到响应报文后会立即关闭连接。</p>
<p>因为客户端与服务器的整个连接过程很短暂，不会与服务器保持长时间的连接状态，所以就被称为“<strong>短连接</strong>”（short-lived connections）。早期的 HTTP 协议也被称为是“<strong>无连接</strong>”的协议。</p>
<p><strong>短连接的缺点：</strong><br>
在 TCP 协议里，建立连接和关闭连接都是非常“昂贵”的操作。<br>
TCP 建立连接要有“三次握手”，发送 3 个数据包，需要 1 个 RTT；<br>
关闭连接是“四次挥手”，4 个数据包需要 2 个 RTT。</p>
<p><strong>什么是RTT？</strong><br>
RTT=传播时延（往返）+排队时延（路由器和交换机的）+数据处理时延（应用程序的）<br>
<img src="https://pic2.zhimg.com/v2-99e600bf39d58d7732b159325ca0caf7_r.jpg" alt="" loading="lazy"></p>
<p>而即使 HTTP最简单的一次“请求 - 响应”通常需要 4 个包，如果不算服务器内部的处理时间，最多是 2 个 RTT。这么算下来，浪费的时间就是“3÷5=60%”，有三分之二的时间被浪费掉了，传输效率低得惊人。<br>
<img src="https://static001.geekbang.org/resource/image/54/0c/54315ed9ac37fbc6547258040f00a80c.png" alt="" loading="lazy"></p>
<p><strong>长连接</strong><br>
针对短连接暴露出的缺点，HTTP 协议就提出了“长连接”的通信方式，也叫“持久连接”（persistent connections）、“连接保活”（keep alive）、“连接复用”（connection reuse）。</p>
<p>其解决思路为“成本均摊”，既然 TCP 的连接和关闭非常耗时间，那么就把这个时间成本由原来的一个“请求 - 应答”均摊到多个“请求 - 应答”上。</p>
<p>虽然不能改善 TCP 的连接效率，但基于“分母效应”，每个“请求 - 应答”的无效时间就会降低不少，整体传输效率也就提高了。</p>
<p><strong>短连接与长连接的对比示意图</strong><br>
<img src="https://static001.geekbang.org/resource/image/57/b4/57b3d80234a1f1b8c538a376aa01d3b4.png" alt="" loading="lazy"></p>
<p>在短连接里发送了三次 HTTP“请求 - 应答”，每次都会浪费 60% 的 RTT 时间。而在长连接的情况下，同样发送三次请求，因为只在第一次时建立连接，在最后一次时关闭连接，所以浪费率就是“3÷9≈33%”，降低了差不多一半的时间损耗。显然，如果在这个长连接上发送的请求越多，分母就越大，利用率也就越高。</p>
<p><strong>连接相关的头字段</strong><br>
由于长连接对性能的改善效果非常显著，所以在 HTTP/1.1 中的连接都会默认启用长连接。不需要用什么特殊的头字段指定，只要向服务器发送了第一次请求，后续的请求都会重复利用第一次打开的 TCP 连接，也就是长连接，在这个连接上收发数据。</p>
<p>当然，我们也可以在请求头里明确地要求使用长连接机制，使用的字段是<strong>Connection</strong>，值是“<strong>keep-alive</strong>”。</p>
<p>如果服务器支持长连接，它总会在响应报文里放一个“<strong>Connection: keep-alive</strong>”字段，告诉客户端：“我是支持长连接的，接下来就用这个 TCP 一直收发数据吧”。</p>
<p><strong>长连接的缺点</strong></p>
<p>因为 TCP 连接长时间不关闭，服务器必须在内存里保存它的状态，这就占用了服务器的资源。如果有大量的空闲长连接只连不发，就会很快耗尽服务器的资源，导致服务器无法为真正有需要的用户提供服务。</p>
<p>所以，长连接也需要在恰当的时间关闭，不能永远保持与服务器的连接，这在客户端或者服务器都可以做到：</p>
<p>在客户端，可以在请求头里加上“Connection: close”字段，告诉服务器：“这次通信后就关闭连接”。服务器看到这个字段，就知道客户端要主动关闭连接，于是在响应报文里也加上这个字段，发送之后就调用 Socket API 关闭 TCP 连接。</p>
<p>服务器端通常不会主动关闭连接，但也可以使用一些策略。拿 Nginx 来举例，它有两种方式：</p>
<p>1.使用“keepalive_timeout”指令，设置长连接的超时时间，如果在一段时间内连接上没有任何数据收发就主动断开连接，避免空闲连接占用系统资源。</p>
<p>2.使用“keepalive_requests”指令，设置长连接上可发送的最大请求次数。比如设置成 1000，那么当 Nginx 在这个连接上处理了 1000 个请求后，也会主动断开连接。</p>
<p><strong>队头阻塞：</strong></p>
<p>什么是队头阻塞？<br>
因为 HTTP 规定报文必须是“一发一收”，这就形成了一个先进先出的“串行”队列。队列里的请求没有轻重缓急的优先级，只有入队的先后顺序，排在最前面的请求被最优先处理。如果队首的请求耽误时间，队列里后的所有请求阻塞起等待。<br>
<img src="https://static001.geekbang.org/resource/image/6a/72/6a6d30a89fb085d5f1773a887aaf5572.png" alt="" loading="lazy"></p>
<p><strong>优化队头阻塞问题</strong><br>
“请求 - 应答”模型不能变，所以“队头阻塞”问题在 HTTP/1.1 里无法解决，只能缓解：</p>
<p>1.采用就是“<strong>并发连接</strong>”（concurrent connections），也就是同时对一个域名发起多个长连接，用数量来解决质量的问题。</p>
<p>缺陷：如果客户端随意建立多个连接，用户数 x 并发数，将会形成巨大的连接数，服务器资源很快耗尽，最后拒绝响应。浏览器一般并发连接数为6-8。</p>
<p>2.采用“<strong>域名分片</strong>”（domain sharding）技术，还是用数量来解决质量的思路。<br>
多个域名都指向同一台服务器 www.chrono.com，这样实际长连接的数量就又上去了。</p>
<figure data-type="image" tabindex="1"><img src="https://static001.geekbang.org/resource/image/f9/72/f93afe4b663d681b8ce63c947f478072.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>